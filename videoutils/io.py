#AUTOGENERATED! DO NOT EDIT! File to edit: dev/01_io.ipynb (unless otherwise specified).

__all__ = ['read_video', 'read_all_frames', 'read_specific_frames', 'capture']

#Cell
from .utils import

#Cell

def read_video(fname: Union[str, cv2.VideoCapture],
               target_frames: Union[tuple, list, int, np.array, None]=None,
               apply: Callable=None) -> Union[torch.Tensor, list]:
    """Flexible video reader where you can grab frames in different ways
    and return as different dtypes.
    """
    cap    = capture(fname)
    frames = read_all_frames(cap) if target_frames is None else read_specific_frames(cap, target_frames)
    cap.release()

    if apply is not None:
        if apply == as_tensor: frames = torch.stack(lapply(frames, apply))
        else: frames = lapply(frames, apply)

    return frames

#Cell

def read_all_frames(cap: cv2.VideoCapture) -> list:
    "Read all frames from a `cv2.VideoCapture` object"
    frames=[]
    while(cap.isOpened()):
        ret, frame = cap.read()
        if ret is True: frames.append(bgr2rgb(frame))
        else: break

    num_frames = cap.get(cv2.CAP_PROP_FRAME_COUNT)
    if not len(frames) == num_frames: print(f'Only read in {num_frames} / {len(frames)}')

    return frames

#Cell

def read_specific_frames(cap: cv2.VideoCapture,
                         target_frames: Union[tuple, list, int, np.array]) -> list:
    "Read specific frames from a `cv2.VideoCapture` object"
    if   isinstance(target_frames, tuple) : frame_idxs = np.arange(*target_frames)
    elif isinstance(target_frames, list)  : frame_idxs = target_frames
    elif isinstance(target_frames, int)   : frame_idxs = [target_frames]
    elif isinstance(target_frames, np.ndarray)   : frame_idxs = target_frames

    frames=[]
    for i in frame_idxs:
        cap.set(cv2.CAP_PROP_POS_FRAMES, i)
        ret, frame = cap.read()
        if ret==True: frames.append(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)) # return np.array
        else: break
    return frames

#Cell

def capture(x: Union[str, cv2.VideoCapture]) -> cv2.VideoCapture:
    "Ensure `cv2.VideoCapture` works properly"
    assert isinstance(x, (str, cv2.VideoCapture)), \
    f"Expected `str` or `cv2.VideoCapture` but received {type(x)} "
    cap = cv2.VideoCapture(x) if isinstance(x, str) else x
    assert(cap.isOpened()), f'Failed to open video "{x}"'
    return cap